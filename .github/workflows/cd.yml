name: Deployment

on:
  push:
    tags:
    branches:
      - 'master'
      - 'develop'
      - 'release'

jobs:

  build-push-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Get Ref Name
        run: echo "REF=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set Development Envars
        if: ${{ env.REF == 'develop' }}
        run: |
          echo "ENVIRONMENT=dev" >> $GITHUB_ENV
          echo "DOMAIN=d.sayapp.company" >> $GITHUB_ENV
          echo "STACK_NAME=say-dev-backend" >> $GITHUB_ENV
        
      - name: Set Staging Envars
        if: ${{ env.REF == 'master' }}
        run: |
          echo "ENVIRONMENT=stage" >> $GITHUB_ENV
          echo "DOMAIN=s.sayapp.company" >> $GITHUB_ENV
          echo "STACK_NAME=say-stag-backend" >> $GITHUB_ENV

      - name: Set Production Envars
        if: ${{ env.REF == 'release' }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV
          echo "DOMAIN=sayapp.company" >> $GITHUB_ENV
          echo "STACK_NAME=say-backend" >> $GITHUB_ENV
          echo "OVERRIDE_IF_PROD=-f docker-compose-prod.yml" >> $GITHUB_ENV

      -
        name: Set Runtime Docker Image ID
        run: echo "RUNTIME_IMAGE_ID=${{ secrets.REGISTRY }}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):${REF}" >> $GITHUB_ENV

      # -
      #   name: Login to GitHub Container Registry
      #   run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.repository_owner }} --password-stdin ${{ secrets.REGISTRY }}
      
      # -
      #   name: Set up Docker Buildx
      #   uses: docker/setup-buildx-action@v1

      # -
      #   name: Cache Docker layers
      #   uses: actions/cache@v2
      #   with:
      #     path: /tmp/.buildx-cache
      #     key: ${{ runner.os }}-buildx-${{ github.sha }}
      #     restore-keys: |
      #       ${{ runner.os }}-buildx-

      # - 
      #   name: Build Production Image
      #   uses: docker/build-push-action@v2
      #   with:
      #     context: .
      #     target: prod
      #     push: true
      #     tags: ${{ env.RUNTIME_IMAGE_ID }}
      #     build-args: |
      #       ENVIRONMENT=${ENVIRONMENT}
      #     cache-from: type=local,src=/tmp/.buildx-cache
      #     # mode=max: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue
      #     cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new

      # -
      #   name: Move cache
      #   run: |
      #     rm -rf /tmp/.buildx-cache
      #     mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
      
      # # -
      #   name: Build Base Image
      #   run: docker build --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} --cache-from ${{ env.BASE_IMAGE_ID }} --target base -t ${{ env.BASE_IMAGE_ID }} .

      # -
      #   name: Build Runtime Image
      #   run: docker build --build-arg ENVIRONMENT=${{ env.ENVIRONMENT }} --cache-from ${{ env.BASE_IMAGE_ID }} --cache-from ${{ env.RUNTIME_IMAGE_ID }} --target prod -t ${{ env.RUNTIME_IMAGE_ID }} .

      # -
      #   name: Push Base Image
      #   run: docker push ${{ env.BASE_IMAGE_ID }}
      
      # -
      #   name: Push Runtime Image
      #   run: docker push ${{ env.RUNTIME_IMAGE_ID }}

      # -
      #   name: Deploy
      #   run: 

      -
        name: Prepare Stack File
        run: ENVIRONMENT=${ENVIRONMENT} DOMAIN=${DOMAIN} CONTAINER_IMAGE=${RUNTIME_IMAGE_ID} STACK_NAME=${STACK_NAME} docker-compose -f docker-compose.yml $OVERRIDE_IF_PROD config > docker-stack.yml

      -
        name: Move Stack File to Server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: 94.139.174.130
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          source: "docker-stack.yml"
          target: "/tmp"
      
      - 
        name: Deploy Stack
        uses: appleboy/ssh-action@v0.1.4
        # env:
          # STACK_NAME: 
        with:
          host: ${{ secrets.DEV_SERVER_ADDR }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: docker stack deploy --prune --resolve-image=always --with-registry-auth -c /tmp/docker-stack.yml ${{ env.STACK_NAME }} 
          
        # name: Deploy Development
        # uses: wshihadeh/docker-deployment-action@v2
        # with:
        #   remote_docker_host: ${{ secrets.DEV_SERVER_ADDR }}
        #   remote_docker_port: ${{ secrets.DEV_SERVER_PORT }}
        #   ssh_private_key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
        #   ssh_public_key: ${{ secrets.DEV_SSH_PUBLIC_KEY }}
        #   deployment_mode: docker-swarm
        #   copy_stack_file: true
        #   deploy_path: /tmp/${{ env.STACK_NAME }}
        #   stack_file_name: docker-stack.yml
        #   keep_files: 5
        #   args: ${{ env.STACK_NAME }}
