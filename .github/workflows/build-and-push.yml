name: Build, Push and Deploy

env:
  REGISTRY: ghcr.io
  DEVELOPMENT: dev
  STAGING: stag
  PRODUCTION: prod
  MAIN_BRANCH: master
  DEV_DOMAIN: d.sayapp.company
  STAGE_DOMAIN: s.sayapp.company
  PROD_DOMAIN: sayapp.company
  TARGET_LAYER: prod
  DEV_STACK_NAME: say-dev-backend
  STAGE_STACK_NAME: say-stag-backend
  PROD_STACK_NAME: say-backend
  DOCKER_STACK_PATH: docker-compose.yml

on:
  push:
    branches:
      - 'master'
      - 'develop'
      - 'release*'

jobs:
  build_and_push:
    name: Build and Push Docker Image
    runs-on: ubuntu-latest
    outputs:
      image_id: ${{ steps.image_id.outputs.image_id }}
    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - id: image_id
        name: Generate Image ID
        run: echo "::set-output name=image_id::${{ env.REGISTRY }}/$(echo ${{ github.repository }} | tr '[:upper:]' '[:lower:]'):${{ github.sha }}"

      - name: Get Ref Name
        run: echo "REF=${GITHUB_REF#refs/heads/}" >> $GITHUB_ENV

      - name: Set Development Envars
        if: ${{ env.REF == 'develop' }}
        run: |
          echo "ENVIRONMENT=${{ env.DEVELOPMENT }}" >> $GITHUB_ENV
          echo ${{ steps.image_id.outputs.image_id }}

      - name: Set Staging Envars
        if: ${{ env.REF == 'master' }}
        run: |
          echo "ENVIRONMENT=stag" >> $GITHUB_ENV

      - name: Set Production Envars
        if: ${{ env.REF == 'release' }}
        run: |
          echo "ENVIRONMENT=prod" >> $GITHUB_ENV

      - name: Login to GitHub Container Registry
        run: echo ${{ secrets.GITHUB_TOKEN }} | docker login -u ${{ github.repository_owner }} --password-stdin ${{ env.REGISTRY }}
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Cache Docker layers
        uses: actions/cache@v2
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Build Image
        uses: docker/build-push-action@v2
        with:
          context: .
          target: ${{ env.TARGET_LAYER }}
          push: true
          tags: ${{ steps.image_id.outputs.image_id }}
          build-args: |
            ENVIRONMENT=${ENVIRONMENT}
          cache-from: type=local,src=/tmp/.buildx-cache
          cache-to: type=local,mode=max,dest=/tmp/.buildx-cache-new # mode=max: https://github.com/docker/buildx#--cache-tonametypetypekeyvalue

      - name: Move cache
        run: |
          rm -rf /tmp/.buildx-cache
          mv /tmp/.buildx-cache-new /tmp/.buildx-cache
      
    
  deploy_dev:
    name: Deploy to Development Server
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/develop'
    needs: build_and_push
    env:
      IMAGE_ID: ${{ needs.build_and_push.outputs.image_id }}

    environment: 
      name: Development
      url: https://${{ env.DEV_DOMAIN }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set Envars
        run: |
          echo "STACK_FILE=docker-stack-${{ env.DEV_STACK_NAME }}-${{ github.sha }}.yml" >> $GITHUB_ENV  

      - name: Prepare Stack File
        run: ENVIRONMENT=${{ env.DEVELOPMENT }} DOMAIN=${{ env.DEV_DOMAIN }} CONTAINER_IMAGE=${IMAGE_ID} STACK_NAME=${{ env.DEV_STACK_NAME }} docker-compose -f ${{ env.DOCKER_STACK_PATH }} $OVERRIDE_IF_PROD config > ${{ env.STACK_FILE }}

      - name: Move Stack File to Server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.DEV_SERVER_ADDR }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          source: ${{ env.STACK_FILE }}
          target: "/tmp"
      
      - name: Deploy Stack
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.DEV_SERVER_ADDR }}
          username: ${{ secrets.DEV_SERVER_USER }}
          key: ${{ secrets.DEV_SSH_PRIVATE_KEY }}
          port: ${{ secrets.DEV_SERVER_PORT }}
          script: docker stack deploy --prune --resolve-image=always --with-registry-auth -c /tmp/${{ env.STACK_FILE }} ${{ env.DEV_STACK_NAME }}

  deploy_staging:
    name: Deploy to Staging Server
    runs-on: ubuntu-latest
    if: github.event.ref == 'refs/heads/master'
    needs: build_and_push
    env:
      IMAGE_ID: ${{ needs.build_and_push.outputs.image_id }}

    environment: 
      name: Staging
      url: https://${{ env.STAGE_DOMAIN }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set Envars
        run: |
          echo "STACK_FILE=docker-stack-${{ env.STAGE_STACK_NAME }}-${{ github.sha }}.yml" >> $GITHUB_ENV  

      - name: Prepare Stack File
        run: ENVIRONMENT=${{ env.STAGING }} DOMAIN=${{ env.STAGE_DOMAIN }} CONTAINER_IMAGE=${IMAGE_ID} STACK_NAME=${{ env.STAGE_STACK_NAME }} docker-compose -f ${{ env.DOCKER_STACK_PATH }} $OVERRIDE_IF_PROD config > ${{ env.STACK_FILE }}

      - name: Move Stack File to Server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.STAGE_SERVER_ADDR }}
          username: ${{ secrets.STAGE_SERVER_USER }}
          key: ${{ secrets.STAGE_SSH_PRIVATE_KEY }}
          port: ${{ secrets.STAGE_SERVER_PORT }}
          source: ${{ env.STACK_FILE }}
          target: "/tmp"
      
      - name: Deploy Stack
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.STAGE_SERVER_ADDR }}
          username: ${{ secrets.STAGE_SERVER_USER }}
          key: ${{ secrets.STAGE_SSH_PRIVATE_KEY }}
          port: ${{ secrets.STAGE_SERVER_PORT }}
          script: docker stack deploy --prune --resolve-image=always --with-registry-auth -c /tmp/${{ env.STACK_FILE }} ${{ env.STAGE_STACK_NAME }}

  deploy_production:
    name: Deploy to Production Server
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/heads/release')
    needs: build_and_push
    env:
      IMAGE_ID: ${{ needs.build_and_push.outputs.image_id }}

    environment: 
      name: Production
      url: https://${{ env.PROD_DOMAIN }}

    steps:
      - name: Git Checkout
        uses: actions/checkout@v2

      - name: Set Envars
        run: |
          echo "STACK_FILE=docker-stack-${{ env.PROD_STACK_NAME }}-${{ github.sha }}.yml" >> $GITHUB_ENV  

      - name: Prepare Stack File
        run: ENVIRONMENT=${{ env.PRODUCTION }} DOMAIN=${{ env.PROD_DOMAIN }} CONTAINER_IMAGE=${IMAGE_ID} STACK_NAME=${{ env.PROD_STACK_NAME }} docker-compose -f ${{ env.DOCKER_STACK_PATH }} $OVERRIDE_IF_PROD config > ${{ env.STACK_FILE }}

      - name: Move Stack File to Server
        uses: appleboy/scp-action@v0.1.1
        with:
          host: ${{ secrets.PROD_SERVER_ADDR }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          source: ${{ env.STACK_FILE }}
          target: "/tmp"
      
      - name: Deploy Stack
        uses: appleboy/ssh-action@v0.1.4
        with:
          host: ${{ secrets.PROD_SERVER_ADDR }}
          username: ${{ secrets.PROD_SERVER_USER }}
          key: ${{ secrets.PROD_SSH_PRIVATE_KEY }}
          port: ${{ secrets.PROD_SERVER_PORT }}
          script: docker stack deploy --prune --resolve-image=always --with-registry-auth -c /tmp/${{ env.STACK_FILE }} ${{ env.PROD_STACK_NAME }}
