version: '3.6'

services:
  redis:
    image: redis:6
    volumes:
      - redis_volume:/data
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
  db:
    image: postgres:12
    environment:
      POSTGRES_DB: say
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD_FILE: /run/secrets/postgres-password
    secrets:
      - postgres-password
    volumes:
      - postgres_volume:/var/lib/postgresql/data
    ports:
      - 35432:5432
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
  pgbackups:
    image: prodrigestivill/postgres-backup-local:12-alpine
    secrets:
      - postgres-password
    volumes:
      - postgres_backup_volume:/backups
    environment:
      - POSTGRES_HOST=db
      - POSTGRES_DB=say
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD_FILE=/run/secrets/postgres-password
      - POSTGRES_EXTRA_OPTS=-Z9 --schema=public --blobs
      - SCHEDULE=@daily
      - BACKUP_KEEP_DAYS=30
      - BACKUP_KEEP_WEEKS=4
      - BACKUP_KEEP_MONTHS=6
      - HEALTHCHECK_PORT=80
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
  rabbitmq:
    image: rabbitmq:3-management-alpine
    volumes:
      - rabbitmq_data_volume:/var/lib/rabbitmq/
      - rabbitmq_log_volume:/var/log/rabbitmq/
    environment:
      RABBITMQ_DEFAULT_USER: say
      RABBITMQ_DEFAULT_PASS_FILE: /run/secrets/rabbitmq-password
      RABBITMQ_DEFAULT_VHOST: say
    secrets:
      - rabbitmq-password
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
  backend: &backend
    image: $CONTAINER_IMAGE
    configs:
      - source: backned-config
        target: .env
    secrets:
      - postgres-password
      - rabbitmq-password
      - flower-password
    environment:
      SAY_ENVIRONMENT: ${ENVIRONMENT}
    networks:
      - traefik-public
      - default
    expose:
      - 5000
    volumes:
      - media_volume/:/app/files
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${STACK_NAME}-backend-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-backend-http.rule=Host(`${DOMAIN?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/flasgger_static`))
        - traefik.http.routers.${STACK_NAME}-backend-http.service=${STACK_NAME}-backend
        - traefik.http.routers.${STACK_NAME}-backend-http.middlewares=https-redirect
        - traefik.http.routers.${STACK_NAME}-backend.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-backend.rule=Host(`${DOMAIN?Variable not set}`) && (PathPrefix(`/api`) || PathPrefix(`/flasgger_static`))
        - traefik.http.routers.${STACK_NAME}-backend.service=${STACK_NAME}-backend
        - traefik.http.routers.${STACK_NAME}-backend.tls=true
        - traefik.http.routers.${STACK_NAME}-backend.tls.certresolver=le
        - traefik.http.services.${STACK_NAME}-backend.loadbalancer.server.port=5000
  worker: &worker
    <<: *backend
    command: celery -A say.api.celery worker --autoscale=16,2 --loglevel=WARNING -B -S redbeat.RedBeatScheduler
    healthcheck:
      test: echo
      #test: celery -A say.api.celery inspect ping
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=false
  flower:
    <<: *worker
    command: celery -A say.api.celery flower
    environment:
      - FLOWER_PERSISTENT=true
      - FLOWER_DB=/flower/db
    volumes:
      - flower_volume:/flower
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${STACK_NAME}-flower-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-flower-http.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME}-flower-http.service=${STACK_NAME}-flower
        - traefik.http.routers.${STACK_NAME}-flower-http.middlewares=https-redirect
        - traefik.http.routers.${STACK_NAME}-flower.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-flower.rule=Host(`flower.${DOMAIN?Variable not set}`)
        - traefik.http.routers.${STACK_NAME}-flower.service=${STACK_NAME}-flower
        - traefik.http.routers.${STACK_NAME}-flower.tls=true
        - traefik.http.routers.${STACK_NAME}-flower.tls.certresolver=le
        - traefik.http.services.${STACK_NAME}-flower.loadbalancer.server.port=5555
  media:
    image: flashspys/nginx-static
    networks:
      - traefik-public
    volumes:
      - media_volume:/static
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${STACK_NAME}-media-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-media-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/files`)
        - traefik.http.routers.${STACK_NAME}-media-http.service=${STACK_NAME}-media
        - traefik.http.routers.${STACK_NAME}-media-http.middlewares=https-redirect
        - traefik.http.routers.${STACK_NAME}-media.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-media.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/files`)
        - traefik.http.routers.${STACK_NAME}-media.service=${STACK_NAME}-media
        - traefik.http.middlewares.${STACK_NAME}-media-strip.stripprefix.prefixes=/files
        - traefik.http.routers.${STACK_NAME}-media.middlewares=${STACK_NAME}-media-strip
        - traefik.http.routers.${STACK_NAME}-media.tls=true
        - traefik.http.routers.${STACK_NAME}-media.tls.certresolver=le
        - traefik.http.services.${STACK_NAME}-media.loadbalancer.server.port=80
  static:
    image: flashspys/nginx-static
    networks:
      - traefik-public
    expose:
      - 80
    volumes:
      - static_volume:/static
    deploy:
      placement:
        constraints:
          - node.labels.${ENVIRONMENT} == true
      mode: replicated
      replicas: 1
      labels:
        - traefik.enable=true
        - traefik.docker.network=traefik-public
        - traefik.constraint-label=traefik-public
        - traefik.http.routers.${STACK_NAME}-static-http.entrypoints=http
        - traefik.http.routers.${STACK_NAME}-static-http.rule=Host(`${DOMAIN?Variable not set}`) && PathPrefix(`/public`)
        - traefik.http.routers.${STACK_NAME}-static-http.service=${STACK_NAME}-static
        - traefik.http.routers.${STACK_NAME}-static-http.middlewares=https-redirect
        - traefik.http.routers.${STACK_NAME}-static.entrypoints=https
        - traefik.http.routers.${STACK_NAME}-static.rule=Host(`${DOMAIN?Variable ot set}`) && PathPrefix(`/public`)
        - traefik.http.middlewares.${STACK_NAME}-static-strip.stripprefix.prefixes=/public
        - traefik.http.routers.${STACK_NAME}-static.middlewares=${STACK_NAME}-static-strip
        - traefik.http.routers.${STACK_NAME}-static.service=${STACK_NAME}-static
        - traefik.http.routers.${STACK_NAME}-static.tls=true
        - traefik.http.routers.${STACK_NAME}-static.tls.certresolver=le
        - traefik.http.services.${STACK_NAME}-static.loadbalancer.server.port=80
volumes:
  redis_volume:
  postgres_volume:
  postgres_backup_volume:
  rabbitmq_data_volume:
  rabbitmq_log_volume:
  media_volume:
  static_volume:
  flower_volume:
networks:
  traefik-public:
    external: true
configs:
  backned-config:
    name: ${STACK_NAME}.env
    external: true
secrets:
  postgres-password:
    name: ${STACK_NAME}-postgres-password
    external: true
  rabbitmq-password:
    name: ${STACK_NAME}-rabbitmq-password
    external: true
  flower-password:
    name: ${STACK_NAME}-flower-password
    external: true