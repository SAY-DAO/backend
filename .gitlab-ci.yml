variables:
  PIP_CACHE_DIR: "$CI_PROJECT_DIR/.cache/pip"

cache:
  paths:
    - .cache/pip
    - venv/

build-prod:
  # Official docker image.
  image: docker:latest
  stage: deploy
  services:
    - name: docker:dind
      alias: docker-service
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - apk update
    - apk add openssh
    - apk add git
    - echo "91.98.112.89 git.pendara.co" >> /etc/hosts
    - export REPO_UPLOAD_ADD=$(echo "$CI_REGISTRY/$CI_REGISTRY_USER/$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
    - export 
  script:
    - chmod +x scripts/*
    - source scripts/deploy.sh 
  only:
    - master

build-staging:
  image: docker:latest
  stage: build
  services:
    - name: docker:dind
      alias: docker-service
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - docker login $DOCKER_REGISTRY -u $REGISTRY_USER -p $REGISTRY_PASSWORD
    - export IMAGE_NAME=$(echo "$DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
    - export IMAGE_TAG=$(echo "$IMAGE_NAME:staging")

  script:
    - docker pull $IMAGE_TAG || true
    - docker build --compress --cache-from $IMAGE_NAME -t $IMAGE_TAG . -f Dockerfile_staging
    - docker push $IMAGE_TAG

  after_script:
    - docker logout

  only:
    - develop
  tags:
    - build

deploy-staging:
  image: kroniak/ssh-client
  stage: deploy
  services:
    - name: docker:dind
      alias: docker-service
  variables:
    DOCKER_TLS_CERTDIR: ""
    DOCKER_DRIVER: overlay2
  before_script:
    - export IMAGE_NAME=$(echo "$DOCKER_REGISTRY/$CI_PROJECT_NAMESPACE/$CI_PROJECT_NAME" | tr '[:upper:]' '[:lower:]')
    - export IMAGE_TAG=$(echo "$IMAGE_NAME:staging")

    - mkdir ~/.ssh
    - echo "$SSH_KNOWN_HOSTS" >> ~/.ssh/known_hosts
    - chmod 644 ~/.ssh/known_hosts
    - eval $(ssh-agent -s)
    - ssh-add <(echo "$SSH_PRIVATE_KEY")

  script:
    - ssh $SERVER_USER@$SERVER "docker login $DOCKER_REGISTRY -u '$REGISTRY_USER' -p '$REGISTRY_PASSWORD'"
    - ssh $SERVER_USER@$SERVER "cd /home/server/say-installer && docker pull $IMAGE_TAG && docker-compose up --remove-orphans -d"

  only:
    - develop
  tags:
    - deploy

